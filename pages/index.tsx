import React, { useState, useEffect, useContext } from 'react';
import styled from 'styled-components';

import Link from 'next/link';
import Head from "next/head";

import { Footer } from '@/components/Footer';
import { Switch } from '@/components/Button/switch';

import { useTheme } from "@/hooks/useTheme";


import { MyContext } from "./_app";

export default function Index() {
    const themeCurr = useTheme();

    return <IndexWrapper>
        <Head>
            <title>Alfxjx</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <Header></Header>
        <div className="main">
            <p className="hello">
                Hello, I'm {' '}
                <del style={{ color: themeCurr.themeColor }}>ðŸ¦„</del> Developer,{' '}
                <a className="breathe" href="http://github.com/alfxjx">
                    Alfxjx.
                </a>

            </p>
        </div>
        <Footer showLink={true}></Footer>
    </IndexWrapper>
}

const IndexWrapper = styled.div`
    width: 100%;
    min-width: 350px;
    min-height: 100vh;
    background: ${({ theme }) => theme.background};
    color: ${({ theme }) => theme.text};
    display: flex;
    flex-direction: column;
    align-items: center;
    box-sizing: border-box;
    padding-top: 2rem;
    font-family: 'Poppins', 'Monaco', serif;
    .main {
        margin-top: 3rem;
        flex: 1;
        p.hello {
				color: ${({ theme }) => theme.text};
				opacity: 1;
				font-weight: 500;
				font-size: 1.25rem;
                line-height: 1.5rem;
				a {
					color: ${({ theme }) => theme.text};
					text-decoration: none;
					&:hover {
						color: ${({ theme }) => theme.textHover};
					}
				}
				.breathe {
					animation: breath infinite 3s ease;
				}

				@keyframes breath {
					0% {
						color: ${({ theme }) => theme.themeColor};
					}

					50% {
						color: ${({ theme }) => theme.themeColorReverse};
					}

					100% {
						color: ${({ theme }) => theme.themeColor};
					}
				}
			}
    }
`;

const Header = () => {
    const { themeToggler, getNowTheme } = useContext(MyContext);

    const [NowTheme, setNowTheme] = useState("");

    useEffect(() => {
        const theme = getNowTheme();
        if (theme === "light") {
            setNowTheme("L");
        } else {
            setNowTheme("D");
        }
    }, [getNowTheme()]);
    return (
        <HeaderWrapper>
            <Link href={'/'}>
                <a>
                    <img width={42} src="/logo.png"></img>
                </a>
            </Link>
            <Switch
                initalValue={NowTheme === "L"}
                onChange={() => themeToggler()}
            />
        </HeaderWrapper>
    )
}

const HeaderWrapper = styled.div`
    width: 100%;
    height: 3rem;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 1rem;
    box-sizing: border-box;
    background: ${({ theme }) => theme.background};
    color: ${({ theme }) => theme.text};
    /* From https://css.glass */
    background: ${({ theme }) => theme.backgroundGlass};
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(5.9px);
    -webkit-backdrop-filter: blur(5.9px);
    a {
        cursor: pointer;
    }
`