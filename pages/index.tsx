import React, { useState, useEffect, useContext } from "react";
import styled from "styled-components";
import Link from "next/link";
import Head from "next/head";

import { useTranslation } from "next-i18next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";

import { MdOutlineTranslate } from "react-icons/md";

import { getAllBlogs, getAllPosts } from "@/utils/api";

import { Footer } from "@/components/Footer";
import { Switch } from "@/components/Button/switch";

import { ProjectCard } from "@/components/Card/ProjectCard";
import { ArticleCard } from "@/components/Card/ArticleCard";

import { useTheme } from "@/hooks/useTheme";

import { MyContext } from "./_app";

import { projList } from "../data/index";
import { Button, TextButton } from "../components/Button/index";
import { useRouter } from "next/router";

export default function Index({ posts }) {
	const themeCurr = useTheme();

	const { t } = useTranslation("common");

	return (
		<IndexWrapper>
			<Head>
				<title>Alfxjx</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Header></Header>
			<div className="main">
				<p className="hello">
					{t("index--whoami")}{" "}
					<a className="breathe" href="http://github.com/alfxjx">
						Alfxjx.
					</a>
				</p>

				<p className="hello-sub">{t("index--self_intro")}</p>

				<div className="center">
					<a
						href="https://alfxjx.zhubai.love"
						title="https://alfxjx.zhubai.love"
						target={"_blank"}
						className="umami--click--newsletter-button"
					>
						<Button title="https://alfxjx.zhubai.love" btnType={"primary"}>
							NewsLetter
						</Button>
					</a>
					<Link href={"/archive"}>
						<Button className="umami--click--archive-button">Archive</Button>
					</Link>
					<Link href={"/about"}>
						<TextButton className="umami--click--about-button">
							About
						</TextButton>
					</Link>
				</div>

				<div className="title">Projects</div>
				<div className="proj-list">
					{projList.map((item) => {
						return <ProjectCard key={item.name} options={item}></ProjectCard>;
					})}
				</div>

				<div className="title">Recent Posts</div>
				<div className="post-list">
					{posts.map((x) => {
						return <ArticleCard key={x.title} post={x} />;
					})}
				</div>
			</div>
			<Footer showLink={true}></Footer>
		</IndexWrapper>
	);
}

const IndexWrapper = styled.div`
	width: 100%;
	min-width: 350px;
	min-height: 100vh;
	background: ${({ theme }) => theme.background};
	color: ${({ theme }) => theme.text};
	display: flex;
	flex-direction: column;
	align-items: center;
	box-sizing: border-box;
	padding-top: 2rem;
	font-family: "Poppins", "Monaco", serif;
	.main {
		margin-top: 3rem;
		margin: 3rem 12px 0;
		flex: 1;
		p.hello {
			color: ${({ theme }) => theme.text};
			opacity: 1;
			font-weight: 700;
			font-size: 2rem;
			line-height: 2.5rem;
			padding: 3rem 0;
			text-align: center;
			a {
				color: ${({ theme }) => theme.text};
				text-decoration: none;
				&:hover {
					color: ${({ theme }) => theme.textHover};
				}
			}
			.breathe {
				animation: breath infinite 3s ease;
			}

			@keyframes breath {
				0% {
					color: ${({ theme }) => theme.themeColor};
				}

				50% {
					color: ${({ theme }) => theme.themeColorReverse};
				}

				100% {
					color: ${({ theme }) => theme.themeColor};
				}
			}
		}
		.hello-sub {
			color: ${({ theme }) => theme.text};
			opacity: 1;
			font-weight: 500;
			text-decoration: underline;
			font-size: 1.5rem;
			line-height: 2rem;
			padding: 1rem 0;
			text-align: center;
		}
		.center {
			width: 300px;
			margin: 2rem auto;
			display: flex;
			justify-content: space-around;
		}
		.title {
			font-size: 1.5rem;
			font-weight: 600;
			margin: 1rem auto;
			text-align: center;
		}
		.proj-list {
			width: 50%;
			margin: 0 auto;
			display: flex;
			justify-content: center;
			flex-wrap: wrap;
			@media (max-width: 1280px) {
				width: 80%;
			}
			@media (max-width: 800px) {
				width: 100%;
			}
		}
		.post-list {
			width: 100%;
			display: flex;
			flex-direction: column;
			align-items: center;
		}
	}
`;

const Header = () => {
	const { themeToggler, getNowTheme } = useContext(MyContext);
	const router = useRouter();

	const [NowTheme, setNowTheme] = useState("");

	useEffect(() => {
		const theme = getNowTheme();
		if (theme === "light") {
			setNowTheme("L");
		} else {
			setNowTheme("D");
		}
	}, [getNowTheme()]);

	const handleI18n = () => {
		router.push(router.pathname, router.pathname, {
			locale: router.locale === "zh" ? "en" : "zh",
		});
	};

	return (
		<HeaderWrapper>
			<Link href={"/"} as="a">
				<img width={42} src="/logo.png"></img>
			</Link>
			<div className="handler">
				<div className="i18n" onClick={handleI18n}>
					<MdOutlineTranslate />
				</div>
				<Switch
					initalValue={NowTheme === "L"}
					onChange={() => themeToggler()}
				/>
			</div>
		</HeaderWrapper>
	);
};

const HeaderWrapper = styled.div`
	width: 100%;
	height: 3rem;
	position: fixed;
	top: 0;
	left: 0;
	right: 0;
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 0 1rem;
	box-sizing: border-box;
	background: ${({ theme }) => theme.background};
	color: ${({ theme }) => theme.text};
	z-index: 9999;
	/* From https://css.glass */
	background: ${({ theme }) => theme.backgroundGlass};
	box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
	backdrop-filter: blur(5.9px);
	-webkit-backdrop-filter: blur(5.9px);
	a {
		cursor: pointer;
	}
	.handler {
		display: flex;
		justify-content: center;
		align-items: center;
	}
	.i18n {
		margin: 0 0.5rem 0 0;
		cursor: pointer;
		svg {
			width: 1.2rem;
			height: 1.2rem;
			padding: 0.25rem;
			border: 2px solid ${({ theme }) => theme.themeColor};
			border-radius: ${({ theme }) => theme.borderRadius};
			fill: ${({ theme }) => theme.themeColor};
		}
	}
`;

export async function getStaticProps({ locale }) {
	const allPosts = getAllPosts(["title", "date", "type", "slug", "excerpt"]);
	const allBlogs = getAllBlogs(["title", "date", "type", "slug", "excerpt"]);
	const posts = [...allBlogs, ...allPosts]
		.sort((a, b) => {
			return new Date(a.date).getTime() - new Date(b.date).getTime();
		})
		.reverse()
		.slice(0, 4);
	return {
		props: {
			...(await serverSideTranslations(locale, ["common"])),
			posts,
		},
	};
}
