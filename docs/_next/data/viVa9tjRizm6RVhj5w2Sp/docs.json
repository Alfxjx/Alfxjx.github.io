{"pageProps":{"newOneContent":{"title":"this is copy 2","date":"2020-07-19T20:35:07.322Z","slug":"loading-in-css copy 2","author":{"name":"Alfxjx","picture":"/assets/blog/authors/alfxjx.jpeg"},"type":"posts","content":"\n# [CSS]矩形进度条的两种实现\n\n最近开发接到一个需求，前端展示付款的验证码，验证码时效 10 分钟，到期过期，同时在二维码的外侧有一个倒计时条，原本的实现方式是通过 JS 来控制，设置左上，左下，右上，右下四个矩形，每个矩形只显示一个折角的边框，从而模拟整个外框。\n\n根据倒计时的时间轮询计算比例，分别控制四个矩形的宽高，从而实现倒计时的 `CountDown` 效果。这样的实现方式有几个问题：\n\n1. 使用4个元素来模拟，导致加入了很多不必要的数据\n2. js 轮询操作，代码很冗长。\n\n本文主要介绍两种非 js 控制的矩形倒计时条的实现方法。\n\n## CSS 实现\n\ncss 实现方法的原理是：\n\n1. 设置四个`background`，使用`linear-gradient` 形成纯色的图片背景。\n2. 设置background的 `size` & `position`，使他们分布在元素的四周。\n3. 设置一个动画，均分成 4 个阶段，每个阶段将背景的位置按照顺时针平移。\n\n具体可以看代码\n\n```css\n.progress {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: var(--height);\n  width: var(--width);\n  border-radius: calc(var(--line) / 2);\n  background: \n    linear-gradient(to right, var(--green) 99.99%, var(--blue))\n    calc(-1 * var(--width)) 0rem \n    / 100% var(--line),\n    linear-gradient(to bottom, var(--green) 99.99%, var(--blue))\n    calc(var(--width) - var(--line)) calc(-1 * var(--height)) \n    / var(--line) 100%,\n    linear-gradient(to right, var(--green) 99.99%, var(--blue)) \n    var(--width) calc(var(--height) - var(--line)) \n    / 100% var(--line),\n    linear-gradient(to top, var(--green), 99.99%, var(--blue)) \n    0rem var(--height) \n    / var(--line) 100%;\n  background-repeat: no-repeat;\n  animation: progress var(--time) linear forwards infinite;\n}\n\n@keyframes progress {\n  0% {\n    background-position: \n      calc(-1 * var(--width)) 0rem,\n      calc(var(--width) - var(--line)) calc(-1 * var(--height)),\n      var(--width) calc(var(--height) - var(--line)), \n      0rem var(--height);\n  }\n  25% {\n    background-position: \n      0rem 0rem,\n      calc(var(--width) - var(--line)) calc(-1 * var(--height)),\n      var(--width) calc(var(--height) - var(--line)), \n      0rem var(--height);\n  }\n  50% {\n    background-position: \n      0rem 0rem, \n      calc(var(--width) - var(--line)) 0rem,\n      var(--width) calc(var(--height) - var(--line)), \n      0rem var(--height);\n  }\n  75% {\n    background-position: \n      0rem 0rem, \n      calc(var(--width) - var(--line)) 0rem,\n      0rem calc(var(--height) - var(--line)), \n      0rem var(--height);\n  }\n  100% {\n    background-position: \n      0rem 0rem, \n      calc(var(--width) - var(--line)) 0rem,\n      0rem calc(var(--height) - var(--line)), \n      0rem 0rem;\n  }\n}\n\n```\n\n## SVG 实现\n\n`svg`的实现则是hack了`stroke-dasharray`利用这个属性造出间断线来模拟倒计时，只要这个线足够长那么从视觉来看就是可以形成从全满变成全空的效果，这里的代码是这样的：\n\n```html\n<div class=\"father\">\n  <svg class=\"progressSvg\" style={{'--speed': speed, '--progress': progress}} viewBox=\"0 0 120 120\">\n    <rect width=\"100\" height=\"100\" x=\"10\" y=\"10\" rx=\"10\" ry=\"10\" />\n  </svg>\n  <span class=\"son\">{props.svg}</span>\n</div>\n```\n\n\n\n主要看rect部分，设置了一个圆角，所以矩形的起始位置设置成了`x=\"10\" y=\"10\"`，并且由于设置了矩形的尺寸，为了能放下，所以 `svg` 标签的 `viewBox=\"0 0 120 120\"` 从而放下这个圆角矩形。\n\n这样以来，矩形的周长就是 400，所以设置`stroke-dasharray` 只要大于 400 即可，为了保险设置成 1000长度的实线，1000长度的虚线。\n\n```css\n.progressSvg rect {\n  fill: none;\n  stroke: blue;\n  stroke-width: 4; // 控制边框的宽度\n  /* \tstroke-linecap: round; */\n  stroke-dasharray: 1000 1000;\n  stroke-dashoffset: 0;\n  animation: spin 60s infinite linear;\n}\n\n```\n\n\n\n接着就是让它动起来，这里使用的是控制`stroke-offset`来控制，就从0（完全是边框）转到 -400（旋转了所有的边框），因为实线的前面是虚线，只要开始设置负的 `offset` 那么就会是类似于被吃掉的效果。\n\n```css\n@keyframes spin {\n  to {\n    stroke-dashoffset: -400;\n  }\n}\n```\n\n这样我们就实现了最简单的二维码倒计时进度条了。[在线演示 codepen.io](https://codepen.io/alfxjx/pen/jOBPeqX?editors=0010) \n\n## 组件化 基于 React\n\n样式基本不需要修改，修改一下js 文件，主要通过 css 变量来对倒计时时间，进度进行控制。\n\n这里根据需求：\n\n1. 页面在加载的时候会给出过期时间，例如总共支付时间10分钟的话，当进度条走了 60% 之后，进度条颜色变成红色。\n2. 根据给出的过期时间，页面刷新的时候，保持当前的进度。\n\n```jsx\nconst CountedDown = (props) => {\n  const [color, setColor] = React.useState(\"green\");\n  const [speed, setSpeed] = React.useState('100s');\n  const [progress] = React.useState('0.75');\n  return (\n    <div>\n      <div class=\"flex\" style={{ \"--bg\": color, \"--time\": speed }}>\n        <div class=\"countdown\">\n          <div class=\"progress\">\n            <div class=\"inner\">\n              {props.css}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"father\">\n        <svg class=\"progressSvg\" style={{'--speed': speed, '--progress': progress}} viewBox=\"0 0 120 120\">\n          <rect width=\"100\" height=\"100\" x=\"10\" y=\"10\" rx=\"10\" ry=\"10\" />\n        </svg>\n        <span class=\"son\">{props.svg}</span>\n      </div>\n    </div>\n  );\n}  \n```\n\n从上面的代码中，可以看出我们给 `css` 传入了 `--bg` 控制进度条的颜色，`--time`控制倒计时，读者可以自行查看在线演示代码。由于css版本的拐角存在问题，主要介绍svg版本。\n\n在 svg 版本中， 传入了 `--speed` 控制速度，`--progress`控制进度，对应的 css :\n\n```css\n.progressSvg rect {\n  fill: none;\n  stroke: blue;\n  stroke-width: 4;\n  /* \tstroke-linecap: round; */\n  stroke-dasharray: 1000 1000;\n  - stroke-dashoffset: 0;\n  - animation: spin 60s infinite linear;\n  + stroke-dashoffset: calc((1 - var(--progress)) * (-400));\n  + animation: spin var(--speed) infinite linear;\n}\n```\n\n`--speed`很好理解，主要解释`--progress`，上文中，我们知道使用动画就是让 `stroke-offset`按照逆时针旋转到 -400， 那么保存进度就是保存这个 offset 值，当我们认为现在的百分比进度是0.75的话，就需要提前 **手动spin** `(1-0.75)*(-400)` 。\n\n可以用于生产的 React 组件 可以参考下面的代码：\n\n```css\n/* CountDown.module.css */\n.father {\n  position: relative;\n}\n.son {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 12rem;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.progress {\n  width: 100%;\n  height: 100%;\n}\n\n@keyframes spin {\n  to {\n    stroke-dashoffset: -400;\n  }\n}\n\n.progress rect {\n  fill: none;\n  stroke: var(--color);\n  stroke-width: 4;\n  /* \tstroke-linecap: round; */\n  stroke-dasharray: 1000 1000;\n  stroke-dashoffset: calc(-400 * var(--rate));\n  animation: spin 600s infinite linear;\n  /*   animation-direction: alternate; */\n}\n```\n\n```tsx\nimport React from 'react';\n\nimport styles from './CountDown.module.css';\n\ninterface MyCSSProperties extends React.CSSProperties {\n  '--color': string;\n  '--rate': string;\n}\n\nconst CountDown = ({\n  color,\n  timer,\n  children,\n}: {\n  color: string;\n  timer: number;\n  children: React.ReactNode;\n}) => {\n  const style: MyCSSProperties = {\n    // Add a CSS Custom Property\n    '--color': color,\n    '--rate': `${1 - timer / (600 * 1000)}`,\n  };\n\n  return (\n    <div className={styles.father}>\n      <svg className={styles.progress} viewBox=\"0 0 120 120\">\n        <rect style={style} width=\"100\" height=\"100\" x=\"10\" y=\"10\" rx=\"6\" ry=\"6\" />\n      </svg>\n      <span className={styles.son}>{children}</span>\n    </div>\n  );\n};\n\nexport { CountDown };\n\n```\n\n```tsx\n/* usage */\nimport { useCountDown } from 'ahooks';\nimport React, { useEffect, useState } from 'react';\n\nconst Index = ()=>{\n  const [barColor, setBarColor] = useState('blue'); // red\n  const [expiryTimer, setTargetDate, formattedRes] = useCountDown({\n    targetDate: dataRes.expiredAt,\n    onEnd,\n  });\n  useEffect(() => {\n    if (timer !== 0 && timer < 600 * 0.35 * 1000) {\n      setBarColor('red');\n    }\n  }, [expiryTimer]);\n  return (\n  <CountDown color={barColor} timer={timer}>\n    <div\n      className={classNames({\n        hidden: show,\n      })}\n      id=\"qrcode\"\n      ref={qrcodeRef}\n      />\n  </CountDown>\n  )\n}\n```\n\n","coverImage":"/assets/blog/bg.jpg"},"allPosts":[{"title":"this is copy 2","date":"2020-07-19T20:35:07.322Z","slug":"loading-in-css copy 2","author":{"name":"Alfxjx","picture":"/assets/blog/authors/alfxjx.jpeg"},"type":"posts","coverImage":"/assets/blog/bg.jpg","excerpt":"最近开发接到一个需求，前端展示付款的验证码，验证码时效 10 分钟，到期过期，同时在二维码的外侧有一个倒计时条，原本的实现方式是通过 JS 来控制，设置左上，左下，右上，右下四个矩形，每个矩形只显示一个折角的边框，从而模拟整个外框。"},{"title":"copy[CSS]矩形进度条的两种实现","date":"2020-07-19T20:35:07.322Z","slug":"loading-in-css copy","author":{"name":"Alfxjx","picture":"/assets/blog/authors/alfxjx.jpeg"},"type":"posts","coverImage":"/assets/blog/js.jpg","excerpt":"最近开发接到一个需求，前端展示付款的验证码，验证码时效 10 分钟，到期过期，同时在二维码的外侧有一个倒计时条，原本的实现方式是通过 JS 来控制，设置左上，左下，右上，右下四个矩形，每个矩形只显示一个折角的边框，从而模拟整个外框。"},{"title":"[CSS]矩形进度条的两种实现","date":"2020-07-19T20:35:07.322Z","slug":"loading-in-css","author":{"name":"Alfxjx","picture":"/assets/blog/authors/alfxjx.jpeg"},"type":"posts","coverImage":"/assets/blog/vue.jpeg","excerpt":"最近开发接到一个需求，前端展示付款的验证码，验证码时效 10 分钟，到期过期，同时在二维码的外侧有一个倒计时条，原本的实现方式是通过 JS 来控制，设置左上，左下，右上，右下四个矩形，每个矩形只显示一个折角的边框，从而模拟整个外框。"}]},"__N_SSG":true}