{"pageProps":{"newOneContent":{"content":"<p>最近发现 mongodb 有一个白嫖的云数据库可以用，准备开发一个统一的后台，用来承接一下个人的项目，并且给这个后台配置一个单独的管理后台。技术选型的时候，首先选择了之前比较熟悉的、使用了类似 Spring 的 Nest.js 来开发。也因此前端的选型选择了 Angular ，然后再部署到 vercel 上面，为了能够方便的部署和开发管理，选择了 GitHub Actions 和 Nx.\r\n因此，本文的目标：将手头的一个 nest.js 项目添加到一个基于 Nx 的 monorepo , 添加一个 angular 的前端加入到 repo 中，使用 GitHub Actions 和 Vercel 进行自动化的部署。</p>\n<blockquote>\n<ol>\n<li>项目地址： <a href=\"https://github.com/Alfxjx/home-admin\">Alfxjx/home-admin</a></li>\n<li>在线演示： <a href=\"https://home-admin.abandon.work/\">home-admin</a></li>\n</ol>\n</blockquote>\n<h2>简介</h2>\n<p>首先是基于原本的脚手架，搭起了一个 nest.js 的项目，参考<a href=\"https://juejin.cn/post/7023690214803505166\">这个文章</a>进行了部署。再进一步开发的时候发现了一些问题。因为选择了 mono-repo 的形式来管理前后端，需要对目前的项目进行一个迁移，并且迁移之后还是需要保持原本的 GitHub Actions。</p>\n<h2>Migration 迁移</h2>\n<h3>Create an Nx repo</h3>\n<p>第一步是新建一个 Nx 的项目。可以参考文档，这里我们就直接新建一个空白的项目。</p>\n<pre><code># create an empty workspace set up for building applications\r\nnpx create-nx-workspace --preset=apps\n</code></pre>\n<p>可以得到一个基本的模版，如下所示：</p>\n<pre><code>myorg/\r\n├── apps/ # 存放项目的应用\r\n├── libs/ # 存放自定义的库文件\r\n├── tools/ # 自定义的一些脚本，类似数据库脚本。\r\n├── workspace.json\r\n├── nx.json\r\n├── package.json\r\n└── tsconfig.base.json\n</code></pre>\n<p>使用 VScode 开发，推荐安装 <a href=\"https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console\">Nx 的官方扩展</a>可以很方便的对项目进行配置。</p>\n<blockquote>\n<p>nrwl.angular-console 看来原本是为了 ng 设计的</p>\n</blockquote>\n<p>使用这个扩展可以唤起一个配置表单用来配置 serve / build 的配置参数，当然自己想在 CLI 里面输入也是可以的。</p>\n<pre><code>npx nx build &#x3C;app-name>\n</code></pre>\n<h3>Migrate the nest.js</h3>\n<p>框架搭好，之后需要做的就是把已经开发的项目迁移过来，参考<a href=\"https://nx.dev/migration/manual\">文档</a>，需要按照 Nx 的要求将之前的项目的文件迁移过来。有几个需要注意的：</p>\n<ol>\n<li>首先把原本单体项目中的代码复制到新的项目的 /app/ 下</li>\n<li>删掉之前的 package.json，但是把依赖复制到根目录的 package.json 下， 处理一下依赖的冲突，还可以顺便升级一下 deprecated 的依赖。</li>\n<li>对于 nest.js 的项目需要一个 src/assets 目录，否则启动或者打包的时候会报错。</li>\n<li>之前的 import 如果有使用绝对路径的需要进行修改。</li>\n<li>配置文件，由于现在是一个子 app ，需要对 tsconfig.json, eslintrc.json 等文件进行修改，因为目前的 mono-repo 中， 主 repo 的根目录下有总的 config 文件，sub-app 需要在它的基础上进行修改：</li>\n<li>需要新增一个 nx 的配置文件 <a href=\"https://github.com/Alfxjx/home-admin/blob/master/apps/home-admin-server/project.json\">project.json</a>，添加一些 nx 的配置，例如开发模式，文件替换，输出位置，使用什么配置文件等。</li>\n</ol>\n<p>迁移的过程中，按照功能点进行迁移验证，发现 Nx 对依赖的版本要求比较严格，下面的几个版本是绑定的，如果遇到一些问题的话，可以去看一下对应版本的 eslint-plugin-nx 的 peerDependency。除此之外，迁移的问题不是很大。</p>\n<pre><code>{\r\n\t\"@nrwl/eslint-plugin-nx\": \"14.0.5\",\r\n\t\"@typescript-eslint/eslint-plugin\": \"~5.18.0\",\r\n\t\"@typescript-eslint/parser\": \"~5.18.0\"\r\n}\n</code></pre>\n<p>在 /app 里面的迁移做完之后，需要在 monorepo 中 注册一下，因为我们的项目是手动导入的，所以需要改一下 根目录下的 workspace.json，添加一个项目名称和路径的对应关系。</p>\n<blockquote>\n<p>之前的 project.json 的配置也可以一股脑的放在最外层的 workspace.json 里面</p>\n</blockquote>\n<p>迁移完成之后，运行一下来看看项目还能否正常使用：</p>\n<pre><code># 除了指定端口之外，需要设置 inspect=false 这样就是原本的 http://localhost:3000 了\r\n# inspect 参考 https://nodejs.org/en/docs/guides/debugging-getting-started/\r\nnpx nx serve &#x3C;your-app-name> --port=3001 --inspect=false\n</code></pre>\n<h3>Add new ng repo</h3>\n<p>添加一个新的项目就比较简单了，以<a href=\"https://nx.dev/packages/angular\">添加一个 ng 项目为例</a>：</p>\n<ol>\n<li>首先安装依赖 <code>npm install -D @nrwl/angular</code></li>\n<li>类似于 ng generate , <code>nx g @nrwl/angular:app &#x3C;appName></code></li>\n<li>事实上也没事别的需要做的，框架完成了接下来的任务。</li>\n</ol>\n<h3>Add utils / libs</h3>\n<p>使用 mono repo 的模式，一个很大的优点就是可以把通用的库文件拆分出来进行管理，并且又不会出现 multi repo 模式管理时，繁琐的发包任务。这里我们以一个通用的组件库和一个工具方法集合为例。</p>\n<h4>lib 组件库模式</h4>\n<p>创建一个 ng-lib : <code>nx g @nrwl/angular:lib components</code>，新增一个名为 components 的组件库，然后在 src 下可以添加组件，记得在 src/index.ts 进行导出：</p>\n<pre><code>export { Button } from \"./libs/Button/index\";\r\nexport type { ButtonProps } from \"./libs/Button/index\";\n</code></pre>\n<p>在 workspace.json 中，发现新增对应的配置。</p>\n<pre><code>\"components\": {\r\n  \"root\": \"libs/components\",\r\n  \"sourceRoot\": \"libs/components/src\",\r\n  \"projectType\": \"library\",\r\n  \"tags\": [],\r\n  \"targets\": {\r\n    \"lint\": {\r\n      \"executor\": \"@nrwl/linter:eslint\",\r\n      \"outputs\": [\"{options.outputFile}\"],\r\n      \"options\": {\r\n        \"lintFilePatterns\": [\"libs/components/**/*.{ts,tsx,js,jsx}\"]\r\n      }\r\n    },\r\n    \"test\": {\r\n      \"executor\": \"@nrwl/jest:jest\",\r\n      \"outputs\": [\"coverage/libs/components\"],\r\n      \"options\": {\r\n        \"jestConfig\": \"libs/components/jest.config.ts\",\r\n        \"passWithNoTests\": true\r\n      }\r\n    }\r\n  }\r\n},\n</code></pre>\n<p>在 tscofig.json 里面则是加入了对 path 的别名：</p>\n<pre><code>    \"paths\": {\r\n      \"@home-mono/utils\": [\"./libs/utils/src/index.ts\"],\r\n      \"@home-mono/components\": [\"./libs/components/src/index.ts\"]\r\n    }\n</code></pre>\n<p>这样在 app/home-admin-web 的项目中引用的时候就可以：</p>\n<pre><code>import { Button } from \"@home-mono/components\";\n</code></pre>\n<h4>utils 工具函数库</h4>\n<p>和上面的组件类似，不过是一个纯 ts lib :</p>\n<pre><code>npx create-nx-workspace &#x3C;utils> --preset=ts\n</code></pre>\n<p>其他的工作和 上面的 components lib 类似。</p>\n<h2>Deploy 部署</h2>\n<p>至此，我们已经完成迁移的工作，可以本地尝试一下 build， 应该是可以的。后面就是完成部署的工作。</p>\n<h3>GitHub Actions</h3>\n<p>原本的 nest.js 的项目是通过 GitHub actions 部署到 vercel 。这里需要对 GitHub actions 的配置进行一点小修改即可。注意这里 nest.js 是需要配置 <a href=\"https://github.com/Alfxjx/home-admin/blob/master/vercel.json\">vercel.json</a>， 指明文件的目录的。和参考的文章 1 中配置一致。</p>\n<pre><code>- run: npm ci\r\n- run: npx nx build home-admin-server --if-present\r\n- name: Deploy to Vercel\r\n  run: npx vercel --token ${VERCEL_TOKEN} --prod\r\n  env:\r\n    VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}\r\n    VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}\r\n    VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}\n</code></pre>\n<h3>Vercel git web hooks</h3>\n<p>前端的项目部署起来就比较简单，这里以 angular 的为例，参考一下 <a href=\"https://nx.dev/guides/deploy-nextjs-to-vercel#deploying-nextjs-applications-to-vercel\">Nx 官网</a> 的 next.js 的例子，发现需要在推送分支的时候，覆盖一下 vercel 的默认配置。</p>\n<pre><code># BUILD COMMAND\r\nnx run home-admin-web:build:production\r\n# OUTPUT DIRECTORY\r\ndist/apps/home-admin-web\n</code></pre>\n<p>看起来很简单，但是真的 push 才发现，由于我们的 mono repo 是一个项目，前端的项目会由于后端项目的 vercel.json ，使得刚才的配置不生效，为了解决这个问题，新建了一个 release-ng 的分支，删除了 master 上的 vercel.json。这样就可以正常部署了。记得修改一下 vercel 上的 <a href=\"https://vercel.com/docs/concepts/git#production-branch\">production branch</a>。</p>\n<blockquote>\n<p>另外，可以使用 GitHub actions 来自动对 release-ng 进行 rebase, 减少发布的手动流程。</p>\n</blockquote>\n<hr>\n<h2>More 其他</h2>\n<h3>Route rewrites</h3>\n<p>一个和本文关系不是很大的技巧，vercel 上面绑定自己的域名时，把一个二级域名用于多个项目是通过 cname 子域名来做的，如果想使用二级域名，可以在 mono repo 里面新建一个 next.js 的 Gateway 项目，利用 <a href=\"https://nextjs.org/docs/api-reference/next.config.js/rewrites\">path rewrite </a>进行转发实现。</p>\n<blockquote>\n<p>参考了 <a href=\"https://notes.ljl.li/portfolio-redesign/\">https://notes.ljl.li/portfolio-redesign/</a></p>\n</blockquote>\n<pre><code>module.exports = {\r\n\tasync rewrites() {\r\n\t\treturn [\r\n\t\t\t{\r\n\t\t\t\tsource: \"/blog/:slug\",\r\n\t\t\t\tdestination: \"https://example.com/blog/:slug\",\r\n\t\t\t},\r\n\t\t];\r\n\t},\r\n};\n</code></pre>\n<h2>结论</h2>\n<p>总之就可以将原本的多个项目整合到一个 mono repo 里面来管理与开发，对于 MEAN/MERN 架构的项目来说还是很方便的。\r\n希望你喜欢。</p>\n<h2>References</h2>\n<ol>\n<li><a href=\"https://juejin.cn/post/7023690214803505166\">基于 Vercel+Github Action 部署 Nest.js 项目</a></li>\n<li><a href=\"https://nx.dev/\">https://nx.dev/</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1876571\">如何使用 Nx、Next.js 和 TypeScript 构建 Monorepo</a></li>\n<li><a href=\"https://nx.dev/guides/deploy-nextjs-to-vercel#deploying-nextjs-applications-to-vercel\">Deploying Next.js applications to Vercel</a></li>\n<li><a href=\"https://vercel.com/docs/concepts/git#production-branch\">Customizing the Production Branch</a></li>\n<li><a href=\"https://nextjs.org/docs/api-reference/next.config.js/rewrites\">Rewrites - Next.js</a></li>\n<li><a href=\"https://notes.ljl.li/portfolio-redesign/\">https://notes.ljl.li/portfolio-redesign/</a></li>\n</ol>\n","title":"Migrating to Nx & Deploy on Vercel","date":"2022-05-08T18:06:00.000Z","slug":"migrating2nx-deploy-on-vercel","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"type":"tech","tag":["Nx","Nest.js","Angular","Vercel"],"excerpt":"将手头的一个 nest.js 项目添加到一个基于 Nx 的 monorepo , 添加一个 angular 的前端加入到 repo 中，使用 GitHub Actions 和 Vercel 进行自动化的部署。","coverImage":"/assets/blog/nx-ng-nest.png"},"allPosts":[{"title":"Migrating to Nx & Deploy on Vercel","date":"2022-05-08T18:06:00.000Z","slug":"migrating2nx-deploy-on-vercel","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"type":"tech","tag":["Nx","Nest.js","Angular","Vercel"],"coverImage":"/assets/blog/nx-ng-nest.png","excerpt":"将手头的一个 nest.js 项目添加到一个基于 Nx 的 monorepo , 添加一个 angular 的前端加入到 repo 中，使用 GitHub Actions 和 Vercel 进行自动化的部署。"},{"title":"Fighting with LeetCode -- 刷题记录一点思考","date":"2022-03-16T15:42:22.712Z","slug":"about-quick-sort","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"type":"tech","tag":["Leetcode"],"coverImage":"/assets/blog/leetcode.jpeg","excerpt":"刷题记录长期更新，最新的更新是快速排序"},{"title":"On Axios Requests & Wrapping","date":"2022-02-22T14:22:22.712Z","slug":"axios-wrapping","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"type":"tech","tag":["Axios","Next.js","TypeScript"],"coverImage":"/assets/blog/axios.jpg","excerpt":"前后端交互最常见的就是 `http` 请求，为了提高效率，需要对 `http` 请求进行封装，目前的现代开发过程中，可以使用 Axios，一种对于 `http` 请求的封装，或者是`fetch`，全新的异步请求`api`，本文主要是介绍我们项目中是如何根据后端返回的类型，对请求进行封装。"},{"title":"如何设计一个好用的组件-以chakra-ui为例","date":"2021-10-28T12:52:42.712Z","slug":"design-a-component","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"type":"tech","tag":["ui","react"],"coverImage":"/assets/blog/chakra-ui.png","excerpt":"最近公司在搭建部门的统一平台，我负责了统一登录前端的开发，因为要对接很多的系统，所以开发了统一登录的sdk，说是sdk其实就是一个组件库。以此为契机，外加之前开发其他的系统中也用了很多种不同的组件库（饿了没-ui/vant/antd/chakra-ui...），今天写一篇文章说说，什么样的组件设计是比较合理的，以及如何设计一个好用的组件。"},{"title":"Next.js 项目迁移到 create-react-app","date":"2021-09-20T17:10:00.000Z","slug":"migrating-cra","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"type":"tech","tag":["next.js","react"],"coverImage":"/assets/blog/nextjs.jfif","excerpt":"公司的统一登录项目之前部署在私有云上采用的是 `next.js`，虽然存在一些问题但是还能使用。现在统一部署到公司自建的 devops 平台，由于平台只有通用的 `react` 流水线，部署之后是客户端渲染的类型（`CSR`），导致之前的服务端渲染部署上去存在很多问题，调整成 `SSG` 模式部署上去也存在很多问题，例如 `redux` 状态管理问题以及 `router` 跳转问题，针对这些问题，最终决定从 `next.js` 框架切换到 `create- react-app` 的客户端渲染模式。这个需求还是很奇葩的，网上搜了一圈也没这个先例，于是就写了此文记录一下迁移以及都 `CRA` 的一些配置。"},{"title":"[CSS]矩形进度条的两种实现","date":"2021-07-19T20:35:07.322Z","slug":"loading-in-css","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"type":"tech","tag":["CSS","react"],"coverImage":"/assets/blog/css-loading.png","excerpt":"最近开发接到一个需求，前端展示付款的验证码，验证码时效 10 分钟，到期过期，同时在二维码的外侧有一个倒计时条，原本的实现方式是通过 JS 来控制，设置左上，左下，右上，右下四个矩形，每个矩形只显示一个折角的边框，从而模拟整个外框。"},{"title":"[Vue]前端项目重构小记","date":"2021-04-13T16:35:07.322Z","slug":"refactor-vue","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"type":"tech","tag":["vue"],"coverImage":"/assets/blog/vue-jquery.jfif","excerpt":"原有的旧项目原本时前后端不分离的，在开发过程中对前端开发人员需要全项目启动，比较麻烦，同时项目在进行前后端分离之后，前端部分开发使用的时http-server启动服务，不支持HMR，修改完成之后需要手动刷新。另外，原本的项目采用的基于jQuery的传统技术栈，在之后项目的迭代升级中，制约了项目的开发。因此开始了本次的前端项目重构。"},{"title":"[Regex]手把手教你解析一个URL字符串","date":"2021-01-22T22:15:42.712Z","slug":"rgex-url","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"type":"tech","tag":["regex","javascript"],"coverImage":"/assets/blog/regex.jpeg","excerpt":"本文从如何使用正则去判断一个字符串是不是url地址出发，介绍了正则的相关规则与技巧"},{"title":"[译] 使用 clamp() 进行响应式设计","date":"2020-11-05T14:52:42.712Z","slug":"clamp-design","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"type":"tech","tag":["CSS","翻译"],"coverImage":"/assets/blog/css-math-functions.jpg","excerpt":"新的 CSS 函数 `clamp()` 提供了一种通过给目标值设置最大最小值的范围来计算实际值方法。它的语法是 `clamp([min], [calculated], [max])`。当你基于屏幕尺寸，使用长度单位 `vw` 来缩放一些值时，这个函数很有用。"},{"title":"如何用正则表达式判断一个数是否是质数","date":"2020-10-08T12:44:58.817Z","slug":"judge-a-number","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"type":"tech","tag":["regex","javascript"],"excerpt":"本文展示了一种判断一个数是否是质数的奇技淫巧，采用的是正则表达式方法。"},{"title":"CSS 的 RGB 颜色覆盖","date":"2020-09-27T08:18:39.741Z","slug":"css-rgb-color","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"type":"tech","tag":["CSS"],"coverImage":"/assets/blog/css-rgb.jpeg","excerpt":"浅薄的研究了一下，希望可以和我讨论"},{"title":"[译] 如何基于 D3.js 使用外部数据源创建图表","date":"2020-09-27T08:18:39.741Z","slug":"d3-charts","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"type":"tech","tag":["d3js","翻译"],"coverImage":"/assets/blog/d3.png","excerpt":"D3 是一个运行于 web 端的 Javascript 可视化库。D3 的第一个版本发布于 2011 年，并且随着社区支持的增加而成熟。对于早期版本的 D3，学习曲线有些陡峭，但对于 JavaScript 初学者来说，最新版本学习起来更容易。大多数为 Web 构建的可视化都依赖于动态数据源 —— 因此，本文的目的是使您能够在 D3 中使用外部数据源创建图表。"},{"title":"[Puppeteer]我是如何做到写EXCEL时速3k行的","date":"2020-05-03T16:35:07.322Z","slug":"puppeteer-cnki","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"type":"tech","tag":["puppeteer","node.js"],"coverImage":"/assets/blog/puppeteer.jfif","excerpt":"之所以有了这篇文，完全就是前两天，老师又给大家派了一个好麻烦的项目统计某某期刊的信息。粗粗看了一下14个人的群里，有我这样延毕的老狗 同学，也有正当主力的研一研二的同学，貌似还有大四一直跟着老师做项目，美其名曰本科阶段就进入实验室的小朋友（当然还是蛮好的），好是很好啦，但是一看要我复制粘贴的文章有650+，顿时有点难顶，还好聪明的小徐同学很快想出了办法："}]},"__N_SSG":true}