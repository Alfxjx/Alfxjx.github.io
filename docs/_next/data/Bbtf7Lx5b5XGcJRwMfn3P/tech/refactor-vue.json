{"pageProps":{"post":{"title":"[Vue]前端项目重构小记","date":"2021-04-13T16:35:07.322Z","slug":"refactor-vue","author":{"name":"Alfxjx","picture":"/assets/authors/alfxjx.jpg"},"content":"<h2>重构目标</h2>\n<p>原有的旧项目原本时前后端不分离的，在开发过程中对前端开发人员需要全项目启动，比较麻烦，同时项目在进行前后端分离之后，前端部分开发使用的时http-server启动服务，不支持<a href=\"https://www.webpackjs.com/concepts/hot-module-replacement/\">HMR</a>，修改完成之后需要手动刷新。另外，原本的项目采用的基于jQuery的传统技术栈，在之后项目的迭代升级中，制约了项目的开发。因此开始了本次的前端项目重构。</p>\n<p>重构的目标是将原本组合在一起的官网项目和客户自服务项目按照其功能分成两块。</p>\n<p>通过此次重构为之后重构运营管理平台积累经验。</p>\n<h2>项目结构</h2>\n<h3>数据层</h3>\n<h4>axios封装</h4>\n<p>数据层原先存在的问题是，ajax请求分布在项目中，例如每进入一个页面都会请求的数据（logUser），事实上是在所有的页面中都重写了一次的逻辑，分散的逻辑不利于后期的维护，以及换人开发的时候上手会比较困难。</p>\n<p><img src=\"/assets/blog/vue-jquery-0.png\" alt=\"平均一个文件两个请求\"></p>\n<p>重构的项目中改善了此问题，方法就是统一管理请求，包括请求的处理以及请求方法的位置。基于webpack打包环境，引入axios，并对axios做一定的封装，实现：</p>\n<ol>\n<li>在发送请求之前和接收数据的时候统一处理</li>\n<li>优化体验加上loading的过度效果，</li>\n<li>对于某些需要用户登录权限的接口在拦截器中获取登录的权限并保持住登录状态。</li>\n<li>根据环境变量控制请求的接口地址。</li>\n</ol>\n<p>这些改进需要配合后端的重构逐步实施，因为现在后台的请求不是完全统一，在后面的重构过程中需要将后台的返回统一化，这样也方便对数据的处理。目前针对此情况，对现有的接口做了一定的分类，按照请求的类型使用不同的axios实例具体可以参考<a href=\"http://192.168.86.17:8090/afin3/afin-portal-web/-/blob/dev/src/api/config.js\">代码</a>, <strong>在拦截器中使用MessageBox的单例模式（伪）参考</strong><a href=\"https://www.yuque.com/alfxjx/gihbyq/odw8bw#rwKl0\">我的笔记本的这个链接</a></p>\n<pre><code class=\"language-javascript\">const baseUrl = NODE_ENV === \"development\" ? \"/api\" : `${VUE_APP_PROD_API}`;\n\nconst axiosInstance = axios.create({\n  baseURL: baseUrl\n  // timeout: 30000,\n});\n// 请求拦截器，在发送之前对数据操作\naxiosInstance.interceptors.request.use(function(config) {\n  loadingInstance = Loading.service({\n    fullscreen: true,\n    lock: true,\n    background: \"transparent\"\n  });\n  config.headers.authorization = sessionStorage.getItem(\"token\");\n  return config;\n});\n// 响应拦截\naxiosInstance.interceptors.response.use(\n  res => {\n    clearTimeout(clearLoading);\n    // 判断失误请求 httpCode=200\n    if (res.data.code !== 0) {\n      // ...\n      loadingInstance.close();\n      return;\n    }\n    // 拦截返回值里面的新的token，用于刷新保持登录态。\n    // 大小写敏感\n    const newToken = res.headers.authorization;\n    // console.log(newToken);\n    if (newToken) {\n      sessionStorage.setItem(\"token\", newToken);\n    }\n    loadingInstance.close();\n    return res.data;\n  },\n  err => {\n    // ...\n    loadingInstance.close();\n  }\n);\n</code></pre>\n<p>重构的项目中使用 axios 对 http 请求进行了封装，默认是json格式的参数对象格式，对于某些未使用json格式对象的，暴露出一个基本axios请求对象实例，另外对于原始项目中较多的 form 请求格式，暴露一个form格式post请求函数。注意此函数需要对参数进行QS.stringfy()。</p>\n<pre><code class=\"language-javascript\">// 对于某些使用form格式接口的适配\nfunction axiosFormRequest(url, data) {\n  return axiosBase.post(url, Qs.stringify(data), {\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8;\"\n    }\n  });\n}\n</code></pre>\n<h4>请求根据环境变量配置不同的链接</h4>\n<p>由于开发过程中，在本地启动，所以http请求会跨域，因此需要webpack的devServer对请求做一次转发，解决跨域问题：</p>\n<pre><code class=\"language-javascript\">// axios config.js\n// dev环境下统一添加一个前缀/api,用以区分http请求和其他请求。\nconst { NODE_ENV, VUE_APP_PROD_API } = process.env;\nconst baseUrl = NODE_ENV === \"development\" ? \"/api\" : `${VUE_APP_PROD_API}`;\n</code></pre>\n<p>在webpack中，匹配到以/api开头的请求，将这些http请求代理到远程的后台服务。</p>\n<pre><code class=\"language-javascript\">// vue.cofig.js\nconst { VUE_APP_DEV_API } = process.env;\nconst webpackConfig = {};\nif (process.env.NODE_ENV === \"development\") {\n  webpackConfig.devServer = {\n    port: 8081, // 端口号\n    https: false, // https:{type:Boolean}\n    open: false, // 配置自动启动浏览器,\n    proxy: {\n      \"/api\": {\n        target: VUE_APP_DEV_API, // 这里是代理的目标地址\n        changeOrigin: true,\n        ws: true,\n        // 这里是给请求添加referer,提供来源信息，后台会对此信息进行校验。\n        onProxyReq: (proxyReq, req, res) => {\n          proxyReq.setHeader(\"referer\", VUE_APP_DEV_API);\n        },\n        pathRewrite: {\n          \"^/api\": \"\"\n        }\n      }\n    }\n  };\n}\nmodule.exports = webpackConfig;\n</code></pre>\n<h4>文件资源调用</h4>\n<p>文件下载功能封装，目前的项目中主要是有两种情况，一种是直接下载的pdf文件，还有一种是表格数据的导出。将两种方法封装在utils/index.js中。基本的原理就是模拟点击事件。</p>\n<pre><code class=\"language-javascript\">export function clickToDownload(name, url) {\n  const aLink = document.createElement(\"a\");\n  const evt = document.createEvent(\"MouseEvents\");\n  evt.initMouseEvent(\"click\", true,false,window,0,0,0,0,0,false,false,false,false,0,null);\n  aLink.download = name;\n  aLink.href = url;\n  aLink.dispatchEvent(evt);\n}\n\n</code></pre>\n<h3>逻辑层</h3>\n<h4>路由的引入</h4>\n<p>获取到数据之后，需要控制展示的逻辑，原本的项目中，每一个页面都是单独的文件构成，不便于维护，使用<a href=\"https://cn.vuejs.org/v2/guide/\">Vue.js</a>框架之后，基于单文件组件搭建项目，使用<a href=\"https://router.vuejs.org/zh/installation.html\">vue-router</a>对页面的路由进行控制，按照模块组织路由的结构，方便之后做维护，路由按照模块做<a href=\"https://router.vuejs.org/zh/guide/advanced/lazy-loading.html\">懒加载</a>。这样在打包之后会把app.js &#x26; chunk-vendor.js 按照路由拆成几个子文件，有助于优化首屏的加载速度。</p>\n<pre><code class=\"language-javascript\">// router.js\nconst routes = [\n  {\n    path: \"/\",\n    component: Layouts, // 部分的后台需要统一的外框，在这里设置\n    children: [\n      ...indexRoutes // 内部是子路由\n    ]\n  },\n  ...HomeRoutes, // 其他不需要此layout的放在后面\n  { // 错误页面的路由放在最后，因为是通配符\n    path: \"*\",\n    name: \"404\",\n    component: ErrorComponent\n  }\n];\n// home.js\nexport const HomeRoutes = [\n  {\n    path: \"/login\",\n    name: \"Login\",\n    component: () => import(\"@/views/login.vue\") // 懒加载\n  }\n];\n</code></pre>\n<h4>引入升级</h4>\n<p>随着模块的增多，需要引入的也会变多，新的方法是使用webpack的<a href=\"https://webpack.js.org/guides/dependency-management/#requirecontext\">require.context</a>方法，参考<a href=\"https://www.jianshu.com/p/c894ea00dfec\">https://www.jianshu.com/p/c894ea00dfec</a>。</p>\n<pre><code class=\"language-javascript\">// 有两种情况一种是在布局中的路由，放在了@/router/moudles/layouts中，\n// 还有一个就是@/router/moudles\nconst reqLayout = require.context(\"./modules/layouts\", false, /\\.js$/);\nconst req = require.context(\"./modules\", false, /\\.js$/);\nconst requireAll = requireContext => {\n  let arr = [];\n  requireContext.keys().forEach(key => {\n    arr = arr.concat(requireContext(key).default);\n  });\n  return arr;\n};\nconst resLayout = requireAll(reqLayout);\nconst res = requireAll(req);\n\nlet routes = [\n  {\n    path: \"/\",\n    component: Layouts,\n    children: resLayout\n  },\n  ...res\n];\n</code></pre>\n<p>另外此时的路由表也有调整，原本是命名的导出<code>export { Route }</code>，现在为了方便引入都改成了<code>export default</code>。</p>\n<blockquote>\n<p>另外此方式对于静态资源的引入也是有帮助的</p>\n</blockquote>\n<h4>使用</h4>\n<p>使用路由的过程中可能需要用路由进行传参数，具体可以<a href=\"https://router.vuejs.org/zh/guide/essentials/passing-props.html\">参考文档</a>，注意解耦的时候，需要在路由中添加对应的配置，解耦之后路由的参数就和组件props同样的方式使用：</p>\n<pre><code class=\"language-javascript\">const routes = [\n\t{\n    path: \"/bigdata/order/:id\",\n    name: \"乾坤大数据-查看详情\",\n    component: BigdataOrderDetail,\n    props: true\n  },\n]\n// 使用的时候就是 this.id 否则是 this.$route.params.id\n// query参数类似 /a?id=123&#x26;time=345\nthis.$route.query.id === 123\n// 此外还有函数模式\n{\n    path: \"/document\",\n    // name: \"文档中心\",\n    component: Document,\n    props: route => {\n      return {\n        focus: checkRoute(route.path)\n      };\n    }\n}\n</code></pre>\n<blockquote>\n<p>本次的重构中推荐使用<a href=\"https://router.vuejs.org/zh/guide/essentials/named-routes.html\">命名路由</a>，这样路由跳转的时候是按照路由表中的name来跳转比较直观。</p>\n</blockquote>\n<h4>使用路由控制权限</h4>\n<p>在一些后台管理系统中登录人的账号不同，其获得的权限也不同，可以在登录之后根据后台返回的权限信息对路由进行配置。一方面后台会对此进行约束，前端的方式就是使用路由守卫来进行控制。\n<a href=\"https://router.vuejs.org/zh/guide/advanced/meta.html\">参考文档-路由元信息</a></p>\n<pre><code class=\"language-javascript\">// 全局前置路由守卫 判断是否已经登录\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // this route requires auth, check if logged in\n    // if not, redirect to login page.\n    if (!auth.loggedIn()) {\n      next({\n        path: '/login',\n        query: { redirect: to.fullPath }\n      })\n    } else {\n      next()\n    }\n  } else {\n    next() // 确保一定要调用 next()\n  }\n})\n</code></pre>\n<p>通常来说，对后台管理项目来说，可以根据路由表直接生成侧边栏结构，需要在路由的meta中对侧边栏信息进行填写 可以<a href=\"https://panjiachen.github.io/vue-element-admin-site/zh/guide/essentials/router-and-nav.html#%E9%85%8D%E7%BD%AE%E9%A1%B9\">参考vue-element-admin</a></p>\n<pre><code class=\"language-javascript\">{\n  path: '/permission',\n  component: Layout,\n  redirect: '/permission/index', //重定向地址，在面包屑中点击会重定向去的地址\n  hidden: true, // 不在侧边栏显示\n  alwaysShow: true, //一直显示根路由\n  meta: { roles: ['admin','editor'] }, //在根路由设置权限,这样它下面所有的子路由都继承了这个权限\n  children: [{\n    path: 'index',\n    component: ()=>import('permission/index'),\n    name: 'permission',\n    meta: {\n      title: 'permission',\n      icon: 'lock', //图标\n      roles: ['admin','editor'], //或者你可以给每一个子路由设置自己的权限\n      noCache: true // 不会被 &#x3C;keep-alive> 缓存\n    }\n  }]\n}\n</code></pre>\n<h4>对可复用逻辑的封装</h4>\n<p>对一些可能会使用到的逻辑进行封装，方便之后的复用</p>\n<ol>\n<li>点击空白部分关闭 <a href=\"http://192.168.86.17:8090/afin3/afin-portal-web/-/blob/dev/src/directives/clickOut.js\">v-clickout</a>, 原本的方式是在每个弹框中进行配置</li>\n</ol>\n<pre><code class=\"language-javascript\">// clickout\n$(document).bind(\"click\", function (e) {\n    if (\n         // 页面点击的时候计算一下离打开弹框和弹框本体的距离，以此判断点是否outside\n         $(e.target).closest(\"#addRoseBox\").length > 0 \n      || $(e.target).closest(\"#addhHtyhgl\").length > 0 \n    ) {\n    } else {\n        $(\"#addRoseBox\").hide();\n    }\n})\n</code></pre>\n<pre><code class=\"language-javascript\">export default {\n  bind(el, binding, vnode) {\n    function documentHandler(e) {\n      // inside\n      if (el.contains(e.target)) {\n        return false;\n      }\n      // outside call bindings\n      if (binding.expression) {\n        binding.value.call(this, e);\n      }\n    }\n    el.__vueClickOutside__ = documentHandler;\n    document.addEventListener(\"click\", documentHandler);\n  },\n  update() {},\n  unbind(el, binding) {\n    document.removeEventListener(\"click\", el.__vueClickOutside__);\n    delete el.__vueClickOutside__;\n  }\n};\n// main.js\nimport Clickoutside from \"./directives/clickOut.js\";\nVue.directive(\"clickout\", Clickoutside);\n\n// use\n&#x3C;div v-clickout=\"siderShow = false\" />\n</code></pre>\n<ol start=\"2\">\n<li><a href=\"https://www.jianshu.com/p/e50633a9005e\">组件权限控制</a>， 逻辑也是读取router.meta中的信息来判断，指令封装的方法参考上面的clickout和<a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\">文档</a></li>\n<li>使用的ui库的封装，<a href=\"https://element.eleme.cn/#/zh-CN/component/quickstart#an-xu-yin-ru\">按需引入组件库</a>，减少打包的体积</li>\n</ol>\n<pre><code class=\"language-javascript\">// @/components/element.js\n// message 等需要在具体位置引入\nimport Vue from \"vue\";\nimport { Button } from \"element-ui\";\nimport \"@/styles/element-variables.scss\"; // 样式\n\nVue.use(Button);\n// main.js 全量import\nimport \"./components/element.js\";\n</code></pre>\n<pre><code class=\"language-css\">@import \"./var.scss\";\n/* 改变主题色变量 */\n$--color-primary: $__blue;\n$--color-warning: $__yellow__button;\n/* 改变 icon 字体路径变量，必需 */\n$--font-path: '~element-ui/lib/theme-chalk/fonts';\n@import \"~element-ui/packages/theme-chalk/src/index\";\n</code></pre>\n<h4>状态管理模块</h4>\n<p>这里展示一个简单的vuex的store写法，随着需要管理的状态增多可以再对store进行规范化。</p>\n<pre><code class=\"language-javascript\">import Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    example: \"\"\n  },\n  mutations: {\n    updateExample(state, payload) {\n      state.example = payload;\n    }\n  },\n  actions: {\n    dispatchExample({ commit }, payload) {\n      commit(\"updateExample\", payload);\n    }\n  },\n  modules: {}\n});\n</code></pre>\n<h3>展示层</h3>\n<h4>样式处理</h4>\n<p>为了能够实现样式的复用，这一次的重构选择了scss预处理器来编排项目中单文件组件的样式。</p>\n<ul>\n<li>默认的样式使用 scoped 修饰，防止样式污染</li>\n</ul>\n<pre><code>&#x3C;style lang=\"scss\" scoped>\n</code></pre>\n<ul>\n<li>类名称按照bem规则编写，充分利用scss的嵌套编写，这样样式能够成块，方便维护。</li>\n</ul>\n<pre><code class=\"language-css\">.afin-header {\n  &#x26;-wrapper {} // 这个是包裹在.afin-header之外的，也可以写在这里\n  &#x26;-title {}\n}\n</code></pre>\n<ul>\n<li>通用的样式设置成mixin，方便复用，颜色等特定变量也抽出。</li>\n</ul>\n<pre><code class=\"language-css\">@mixin hcenter {\n\tposition: absolute;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n}\n\n@include hcenter;\n</code></pre>\n<ul>\n<li>保存上述样式的时候保存在src/styles下，文件名以一个下划线开头的，最后会被合并到index.scss文件中。</li>\n<li>另外，使用element-ui的时候将自定义的样式等也放在这里的element-variables.scss中。<a href=\"https://element.eleme.cn/#/zh-CN/component/custom-theme#zai-xiang-mu-zhong-gai-bian-scss-bian-liang\">参考</a></li>\n</ul>\n<p><img src=\"/assets/blog/vue-jquery-1.png\" alt=\"样式文件夹\"></p>\n<h4>修改element-ui的样式</h4>\n<p>现在我们来说说怎么覆盖 element-ui 样式。由于 element-ui 的样式我们是在全局引入的，所以你想在某个页面里面覆盖它的样式就不能加 scoped，但你又想只覆盖这个页面的 element 样式，你就可在它的父级加一个 class，用命名空间来解决问题。</p>\n<pre><code class=\"language-css\">.article-page {\n  /* 你的命名空间 */\n  .el-tag {\n    /* element-ui 元素*/\n    margin-right: 0px;\n  }\n}\n</code></pre>\n<p>当你子组件使用了 <code>scoped</code> 但在父组件又想修改子组件的样式可以 通过 <code>>>></code> 来实现：</p>\n<pre><code class=\"language-css\">&#x3C;style scoped>\n.a >>> .b { /* ... */ }\n&#x3C;/style>\n</code></pre>\n<p><code>sass</code> 你可以通过 <code>/deep/</code> 来代替 <code>>>></code> 实现想要的效果。\n所以你想覆盖某个特定页面 <code>element</code> 的 button 的样式，你可以这样做：</p>\n<pre><code class=\"language-css\">/* in scss */\n.xxx-container /deep/ .el-button{\n  xxxx\n}\n</code></pre>\n<h4>组件化开发</h4>\n<p>常用的组件除了基于element-ui封装的组件之外，对不同的项目还会封装特定的组件，本次重构中封装了以下几个组件用于复用：</p>\n<ol>\n<li>回到顶部组件</li>\n<li>带提示功能的输入框，选择框组件</li>\n<li>树形组件等</li>\n</ol>\n<p>自定义组件都以Afin开头，保持独特性，方便之后汇总。</p>\n<h4>静态资源引入</h4>\n<ul>\n<li>静态的图片等文件放在@/assets/img下，会被webpack打包，打包时<a href=\"https://cli.vuejs.org/zh/guide/html-and-static-assets.html#%E4%BB%8E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%AF%BC%E5%85%A5\">将小于 4kb 的资源内联</a>，而大的静态资源放在public文件夹中的，打包时原样复制进入build的文件中。</li>\n<li>引入图片资源的时候，需要通过require引入，<strong>类似于将图片看作是一个模块</strong>。因此也可以使用import pic from \"path\" 的方式。</li>\n<li>静态文件pdf等，放在/public文件夹里面，打包的时候会原样打包到生产包中。</li>\n</ul>\n<h4>echarts相关的配置</h4>\n<ol>\n<li>饼图默认高亮其中一个。可以使用echarts实例的dispatchAction方法</li>\n</ol>\n<pre><code class=\"language-javascript\">/**\n * @description 饼图默认高亮一个\n * @author xujx\n * @date 2021-02-04\n * @export\n * @param {*} charts echarts的实例\n * @param {*} dataIndex 高亮第几个\n * @param {number} [seriesIndex=0]\n */\nexport function defaultHighlight(charts, dataIndex, seriesIndex = 0) {\n  // 输入index超过范围就置为0\n  const len = charts.getOption().series[seriesIndex].data.length;\n  if (dataIndex > len - 1) {\n    dataIndex = 0;\n  }\n  charts.dispatchAction({\n    type: \"highlight\",\n    seriesIndex: seriesIndex,\n    dataIndex: dataIndex\n  });\n  // 当鼠标移入时，如果不是第一项，则把当前项置为选中，如果是第一项，则设置第一项为当前项\n  charts.on(\"mouseover\", function(e) {\n    charts.dispatchAction({\n      type: \"downplay\",\n      seriesIndex: seriesIndex,\n      dataIndex: dataIndex\n    });\n    const index = e.dataIndex;\n    if (e.dataIndex !== index) {\n      charts.dispatchAction({\n        type: \"downplay\",\n        seriesIndex: seriesIndex,\n        dataIndex: index\n      });\n    }\n    if (e.dataIndex === 0) {\n      charts.dispatchAction({\n        type: \"highlight\",\n        seriesIndex: seriesIndex,\n        dataIndex: e.dataIndex\n      });\n    }\n  });\n\n  // 当鼠标离开时，把当前项置为选中\n  charts.on(\"mouseout\", function(e) {\n    charts.dispatchAction({\n      type: \"downplay\",\n      seriesIndex: seriesIndex,\n      dataIndex: e.dataIndex\n    });\n  });\n}\n\n</code></pre>\n<h2>代码风格的说明</h2>\n<p>重构项目使用 eslint 约束代码的格式。关于vuejs的代码风格可以参照<a href=\"https://cn.vuejs.org/v2/style-guide/\">风格指南</a> 。下面挑几个重点说明。</p>\n<h3>暂时关闭eslint的校验</h3>\n<p>如果遇到eslint报错但是这里不适合按照推荐修改的情况，可以有两种方法解决：</p>\n<ol>\n<li>在eslintrc.js里面，在rules里面添加一个配置关闭报错。</li>\n<li>在报错位置添加魔法注释（magic comments）</li>\n</ol>\n<pre><code class=\"language-javascript\">/* eslint-disable */\nsomething with eslint error\n/* eslint-enable */\n</code></pre>\n<h3>如何自动按照eslint标准格式化</h3>\n<p>可以配置编辑器在保存的时候自动格式化，也可以手动格式化，vue cli提供了一个功能 lint 用于格式化代码</p>\n<pre><code class=\"language-shell\">yarn lint // cli 的格式化指令\n</code></pre>\n<h2>编写单元测试</h2>\n<p>对于一些工具函数有必要编写测试方法，模板中列举了对日期格式化函数的单元测试，具体见 src/utils/formatDate。</p>\n<pre><code>npm i -D jest // 安装依赖\n\n// package.json\n\"script\": {\n   \"test\": \"jest --coverage\"\n}\n\n// .eslintrc.js\nenv: {\n  jest: true // 避免jest测试的函数报错\n},\n</code></pre>\n<p>运行 npm run test可以查看代码覆盖率等情况。</p>\n<pre><code class=\"language-javascript\">// const formatDate = require(\"./formatDate\").formatDate;\n// or\nimport { formatDate } from \"./formatDate\";\n\ntest(\"formatDate\", () => {\n  expect(formatDate(null, \"yyyyMMdd\")).toEqual(\"\");\n  expect(formatDate(new Date(\"2020-11-11\"), \"yyyyMMdd\")).toEqual(\"20201111\");\n  expect(formatDate(new Date(\"2020-11-11 10:11:11\").getTime(), \"yyyyMMdd-hh:mm:ss\")).toEqual(\n    \"20201111-10:11:11\"\n  );\n  expect(\n    formatDate(Math.floor(new Date(\"2020-11-11\").getTime() / 1000), \"yyyyMMdd\")\n  ).toEqual(\"20201111\");\n});\n\n</code></pre>\n<h2>项目打包的相关</h2>\n<h3>配置不同的环境变量模式</h3>\n<p>vue/cli中默认设置了development、production等常用的环境变量。有的时候，项目还需要一个测试的环境，或者说项目在A版本的时候需要跳转a链接，但是到了B版本的时候却需要跳转b链接，本项目中使用的是自定义一个mode=test来配置。</p>\n<pre><code class=\"language-powershell\"># .env.test 文件\nNODE_ENV = production #表明打包的时候为生产环境\nVUE_APP_MODE = test #表明使用的是test变量flag来进行判断\nVUE_APP_PORTAL = https://v2.to.io/portal/ #也可以保存些信息\n</code></pre>\n<p>这样在打包的时候，可以运行<code> \"build:test\": \"vue-cli-service build --mode test\",</code>实现按照flag打包。</p>\n<h3>vue.config.js</h3>\n<p>最终是暴露出一个对象，所有的webpack的配置都是在这个对象中去配置的，最后通过vue/cli的merge与基本的配置合并。</p>\n<pre><code class=\"language-javascript\">const webpackConfig = {};\nmodule.exports = webpackConfig;\n</code></pre>\n<h3>开启gzip</h3>\n<pre><code class=\"language-javascript\">const CompressionPlugin = require(\"compression-webpack-plugin\");\n\nif (process.env.NODE_ENV === \"production\") {\n  webpackConfig[\"configureWebpack\"] = config => {\n     config[\"plugins\"].push(\n      new CompressionPlugin({\n        test: /\\.js$|\\.html$|\\.css$/, // 匹配文件名\n        threshold: 10240, // 对超过10k的数据压缩\n        deleteOriginalAssets: true\n      })\n    );\n  }\n}\n</code></pre>\n<h3>图片压缩</h3>\n<pre><code class=\"language-javascript\">const customOptions = {\n  mozjpeg: {\n    progressive: true,\n    quality: 50\n  },\n  optipng: {\n    enabled: true\n  },\n  pngquant: {\n    quality: [0.5, 0.65],\n    speed: 4\n  },\n  gifsicle: {\n    interlaced: false\n  },\n  // 不支持WEBP就不要写这一项\n  webp: {\n    quality: 75\n  }\n};\nif (process.env.NODE_ENV === \"production\") {\n  webpackConfig[\"chainWebpack\"] = config => {\n    config.module\n      .rule(\"images\")\n      .test(/\\.(gif|png|jpe?g|svg)$/i)\n      .use(\"image-webpack-loader\")\n      .loader(\"image-webpack-loader\")\n      .options(customOptions)\n      .end();\n  };\n}  \n</code></pre>\n<h3>关闭sourceMap</h3>\n<pre><code class=\"language-javascript\">const webpackConfig = {\n  // 生产环境关闭sourceMap\n  productionSourceMap: false\n};\n</code></pre>\n<h3>查看打包优化的包体积</h3>\n<pre><code class=\"language-javascript\">const BundleAnalyzerPlugin = require(\"webpack-bundle-analyzer\")\n  .BundleAnalyzerPlugin;\nif (process.env.NODE_ENV === \"production\") {\n  webpackConfig[\"configureWebpack\"] = config => {\n    config[\"plugins\"].push(\n      new BundleAnalyzerPlugin({\n        analyzerMode: \"static\",\n        openAnalyzer: false,\n        reportFilename: `../reports/r-${new Date().getTime()}.html`\n      })\n    );\n  }  \n}\n// 可以把/reports加入 .gitignore\n</code></pre>\n<h3>webpack-devSever</h3>\n<pre><code class=\"language-javascript\">const { VUE_APP_DEV_API } = process.env;\nif (process.env.NODE_ENV === \"development\") {\n  webpackConfig.devServer = {\n    // port: 8081, // 端口号\n    https: false, // https:{type:Boolean}\n    open: false, // 配置自动启动浏览器,\n    proxy: {\n      \"/api\": {\n        target: VUE_APP_DEV_API,\n        changeOrigin: true,\n        ws: true,\n        onProxyReq: (proxyReq, req, res) => {\n          proxyReq.setHeader(\"referer\", VUE_APP_DEV_API);\n        },\n        pathRewrite: {\n          \"^/api\": \"\"\n        }\n      }\n    }\n  };\n}\n</code></pre>\n<h2>前端开发脚手架</h2>\n<h2>参考文章</h2>\n<p><a href=\"https://woai3c.gitee.io/introduction-to-front-end-engineering/03.html#%E9%AB%98%E5%86%85%E8%81%9A-%E4%BD%8E%E8%80%A6%E5%90%88\">入门前端工程化</a>\n<a href=\"https://panjiachen.gitee.io/vue-element-admin-site/zh/\">vue-element-admin</a></p>\n","coverImage":"/assets/blog/vue-jquery.jfif"}},"__N_SSG":true}