{"pageProps":{"newOneContent":{"content":"<blockquote>\n<ul>\n<li>原文地址：<a href=\"https://calebhearth.com/clamp-for-responsive-design\">clamp() for Responsive Design</a></li>\n<li>原文作者：<a href=\"https://calebhearth.com/\">Caleb Hearth</a></li>\n<li>译文出自：<a href=\"https://github.com/xitu/gold-miner\">掘金翻译计划</a></li>\n<li>本文永久链接：<a href=\"https://github.com/xitu/gold-miner/blob/master/article/2020/clamp-for-responsive-design.md\">https://github.com/xitu/gold-miner/blob/master/article/2020/clamp-for-responsive-design.md</a></li>\n<li>译者：<a href=\"https://github.com/Alfxjx\">Alfxjx</a></li>\n<li>校对者：<a href=\"https://github.com/z0gSh1u\">z0gSh1u</a>、<a href=\"https://github.com/HurryOwen\">HurryOwen</a></li>\n</ul>\n</blockquote>\n<p>新的 CSS 函数 <code>clamp()</code> 提供了一种通过给目标值设置最大最小值的范围来计算实际值方法。它的语法是 <code>clamp([min], [calculated], [max])</code>。当你基于屏幕尺寸，使用长度单位 <code>vw</code> 来缩放一些值时，这个函数很有用。</p>\n<p>该项技术很适用于跨多种屏幕尺寸的设计。常规的方法是根据屏幕的宽度使用媒体查询的方法来对样式做不同的调整，但是这么做导致我们在开发的时候要么以“移动端优先”为原则，开发小屏幕的应用，再按比例增加；要么是以“桌面端优先”为原则，开发适用于大屏幕的应用，再按比例缩小。通过使用 <code>clamp()</code> 函数，用一个已知的最大最小值来约束变化的范围，我们开发人员可以减少对于样式响应式断点的依赖，这样就无需为了一致性检查很多种不同的宽度了。</p>\n<p><img src=\"/assets/blog/clamp.png\" alt=\"运河闸可以使船通过不同水位的水域\"></p>\n<p>为了理解 <code>clamp()</code> 是如何工作的，我喜欢用运河闸的比喻。运河闸使用两个可以升高和降低的船闸，以使船只可以越过它们。一旦船在闸板之间，则从高水位侧添加水或将水排到低水位侧，以分别升高或降低闸板之间的水位。这使船可以随水位轻轻浮动并在最小和最大水位之间移动。</p>\n<p>更具体地说，<code>clamp(100%, calc(1em + 1vw), 200%)</code> 的效果与 <code>max(100%, min(calc(1em + 1vw), 200%))</code> 相同。最神奇的就是中间的这个参数 <code>calc(1em + 1vw)</code>，将浏览器的宽度（或者说，视口的宽度）代入了计算之中。<code>1vw</code> 相当于视口宽度的 1%，因此 1em 加上视口宽度的 1% 的计算结果会随着浏览器的大小调整而变动。</p>\n<p>让我们来看看我们是怎样通过此方法来调整字号大小的。下面的这个例子和我在我的个人网站上使用的方式非常相近：</p>\n<pre><code class=\"language-css\">body {\r\n  font-size: clamp(100%, calc(1rem + 2vw), 1.375rem);\r\n}\n</code></pre>\n<p>拆分下来看，<code>100%</code> 通常表示着“当前页面的基本尺寸”，对于字号而言就是 16px。<code>calc(1rem + 2vw)</code> 使用 <code>rem</code>（同样是 16px ）加上视口宽度的 2% 来进行计算。<code>1.375rem</code> 则是我理想情况下的最大字号，为 22px。</p>\n<p><code>clamp()</code> 以及相关的 <code>min()</code> 和 <code>max()</code> 函数在本文写作之时都有了很好的浏览器支持：</p>\n<p><img src=\"/assets/blog/css-math-functions.jpg\" alt=\"来自 caniuse.com 的跨主要浏览器的 css-math-functions 功能支持数据\"></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/clamp\">在 MDN 中</a>，<code>clamp()</code> 适用于任何使用了数字、百分数以及其他长度单位的样式中。但奇怪的是，当我尝试将其应用到<a href=\"https://blog.typekit.com/2016/08/17/flexible-typography-with-css-locks/\"> <code>line-height</code> </a>时，我发现 Safari 14 应该是支持 <code>line-height: clamp(...)</code> 这样的写法的（我尝试了 <code>@supports</code>），但是实际情况却是回退到了基准的 <code>line-height</code> ，非常令人费解。最终我使用 <code>line-height: min(calc(1.1em + 1vw), 32px)</code> 从而实现了 <code>line-height</code> 响应式地根据我的内容高度来确定。这里不需要设置一个最小值，因为我测试的宽度都不是很小，但是如果有最小值的需求的话，可以在最外层包裹一个 <code>max()</code>：<code>line-height: max(100%, min(calc(1.1em + 1vw), 32px))</code>。</p>\n<blockquote>\n<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href=\"https://github.com/xitu/gold-miner\">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><a href=\"https://github.com/xitu/gold-miner\">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href=\"https://juejin.im\">掘金</a> 上的英文分享文章。内容覆盖 <a href=\"https://github.com/xitu/gold-miner#android\">Android</a>、<a href=\"https://github.com/xitu/gold-miner#ios\">iOS</a>、<a href=\"https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF\">前端</a>、<a href=\"https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF\">后端</a>、<a href=\"https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE\">区块链</a>、<a href=\"https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81\">产品</a>、<a href=\"https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1\">设计</a>、<a href=\"https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD\">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href=\"https://github.com/xitu/gold-miner\">掘金翻译计划</a>、<a href=\"http://weibo.com/juejinfanyi\">官方微博</a>、<a href=\"https://zhuanlan.zhihu.com/juejinfanyi\">知乎专栏</a>。</p>\n</blockquote>\n","title":"[译] 使用 clamp() 进行响应式设计","date":"2020-11-05T14:52:42.712Z","slug":"clamp-design","author":{"name":"Alfxjx","picture":"/assets/blog/authors/alfxjx.jpeg"},"type":"tech","coverImage":"/assets/blog/css-math-functions.jpg"},"allPosts":[{"title":"[译] 使用 clamp() 进行响应式设计","date":"2020-11-05T14:52:42.712Z","slug":"clamp-design","author":{"name":"Alfxjx","picture":"/assets/blog/authors/alfxjx.jpeg"},"type":"tech","coverImage":"/assets/blog/css-math-functions.jpg","excerpt":"新的 CSS 函数 `clamp()` 提供了一种通过给目标值设置最大最小值的范围来计算实际值方法。它的语法是 `clamp([min], [calculated], [max])`。当你基于屏幕尺寸，使用长度单位 `vw` 来缩放一些值时，这个函数很有用。"},{"title":"如何用正则表达式判断一个数是否是质数","date":"2020-10-08T12:44:58.817Z","slug":"judge-a-number","author":{"name":"Alfxjx","picture":"/assets/blog/authors/alfxjx.jpeg"},"type":"tech","excerpt":"本文展示了一种判断一个数是否是质数的奇技淫巧，采用的是正则表达式方法。"},{"title":"CSS 的 RGB 颜色覆盖","date":"2020-09-27T08:18:39.741Z","slug":"css-rgb-color","author":{"name":"Alfxjx","picture":"/assets/blog/authors/alfxjx.jpeg"},"type":"tech","coverImage":"/assets/blog/css-rgb.jpeg","excerpt":"浅薄的研究了一下，希望可以和我讨论"},{"title":"[译] 如何基于 D3.js 使用外部数据源创建图表","date":"2020-09-27T08:18:39.741Z","slug":"d3-charts","author":{"name":"Alfxjx","picture":"/assets/blog/authors/alfxjx.jpeg"},"type":"tech","coverImage":"/assets/blog/d3.png","excerpt":"D3 是一个运行于 web 端的 Javascript 可视化库。D3 的第一个版本发布于 2011 年，并且随着社区支持的增加而成熟。对于早期版本的 D3，学习曲线有些陡峭，但对于 JavaScript 初学者来说，最新版本学习起来更容易。大多数为 Web 构建的可视化都依赖于动态数据源 —— 因此，本文的目的是使您能够在 D3 中使用外部数据源创建图表。"},{"title":"[CSS]矩形进度条的两种实现","date":"2020-07-19T20:35:07.322Z","slug":"loading-in-css","author":{"name":"Alfxjx","picture":"/assets/blog/authors/alfxjx.jpeg"},"type":"tech","coverImage":"/assets/blog/css-loading.png","excerpt":"最近开发接到一个需求，前端展示付款的验证码，验证码时效 10 分钟，到期过期，同时在二维码的外侧有一个倒计时条，原本的实现方式是通过 JS 来控制，设置左上，左下，右上，右下四个矩形，每个矩形只显示一个折角的边框，从而模拟整个外框。"}]},"__N_SSG":true}