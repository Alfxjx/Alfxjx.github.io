{"pageProps":{"post":{"title":"如何基于 D3.js 使用外部数据源创建图表","date":"2020-09-27T08:18:39.741Z","slug":"d3-charts","author":{"name":"Alfxjx","picture":"/assets/blog/authors/alfxjx.jpeg"},"content":"<h1>如何基于 D3.js 使用外部数据源创建图表</h1>\n<blockquote>\n<ul>\n<li>原文地址：<a href=\"https://blog.bitsrc.io/how-to-create-charts-from-external-data-sources-with-d3-js-4abbcb574706\">How to Create Charts from External Data Sources with D3.js</a></li>\n<li>原文作者：<a href=\"https://medium.com/@ds_mik\">Shaumik Daityari</a></li>\n<li>译文出自：<a href=\"https://github.com/xitu/gold-miner\">掘金翻译计划</a></li>\n<li>本文永久链接：<a href=\"https://github.com/xitu/gold-miner/blob/master/article/2020/how-to-create-charts-from-external-data-sources-with-d3-js.md\">https://github.com/xitu/gold-miner/blob/master/article/2020/how-to-create-charts-from-external-data-sources-with-d3-js.md</a></li>\n<li>译者：<a href=\"https://github.com/Alfxjx\">Alfxjx</a></li>\n<li>校对者：<a href=\"https://github.com/qq1037305420\">qq1037305420</a></li>\n</ul>\n</blockquote>\n<p><img src=\"https://cdn-images-1.medium.com/max/12032/1*_2y7jPirLNtPHduWzlgphQ.jpeg\" alt=\"\"></p>\n<p>福布斯于 2018 年年中的统计显示，人类<a href=\"https://www.forbes.com/sites/bernardmarr/2018/05/21/how-much-data-do-we-create-every-day-the-mind-blowing-stats-everyone-should-read/\">每天约产生 2.5EB</a> 的数据。随着对如此海量数据的机器学习算法的研究，强大的可视化技术有助于将所见以一个正确的方式呈现出来。数据可视化还可以帮助读者更快地处理数据并记住数据的关键特征。在过去的十年中，对可视化专家的需求也在增加。</p>\n<p>D3 是一个运行于 web 端的 Javascript 可视化库。D3 的第一个版本发布于 2011 年，并且随着社区支持的增加而成熟。对于早期版本的 D3，学习曲线有些陡峭，但对于 JavaScript 初学者来说，最新版本学习起来更容易。大多数为 Web 构建的可视化都依赖于动态数据源 —— 因此，本文的目的是使您能够在 D3 中使用外部数据源创建图表。</p>\n<h2>D3 中的柱状图</h2>\n<p>在 D3 中加载外部数据之前，让我们创建一个基本的柱状图，并在加载外部数据后，重新绘制该柱状图。首先，通过下面的一行代码来加载 D3 脚本。</p>\n<pre><code class=\"language-html\">&#x3C;script src=\"https://d3js.org/d3.v5.min.js\">&#x3C;/script>\n</code></pre>\n<p>你可能会发现，网络上的绝大部分的 D3 教程都是基于 v3 或者是 v4 版本的。但是本文中我们会使用在 2018 年的早期发布的 v5 版本的 D3 库。<a href=\"https://github.com/d3/d3/releases/tag/v5.12.0\">最新版本的 D3 库</a>大概是一个月前发布的（译注：最新版本的 D3 发布于 2019 年的 9 月）。</p>\n<p><a href=\"https://github.com/d3/d3/blob/master/CHANGES.md#selections-d3-selection\">D3.js 的 changelog</a> 记录了版本之间的改动。就本文而言，需要注意 v4 与 v5 的加载方式不同。</p>\n<p>首先让我们定义标题和数据。</p>\n<pre><code class=\"language-js\">var title = \"Comments on Posts\",\n\tdata = [\n\t\t{ type: \"Post A\", amount: 4 },\n\t\t{ type: \"Post B\", amount: 2 },\n\t\t{ type: \"Post C\", amount: 7 },\n\t\t{ type: \"Post D\", amount: 5 },\n\t\t{ type: \"Post E\", amount: 6 },\n\t];\n</code></pre>\n<p>在引入 D3 的脚本库之后，你可以使用全局变量 <code>d3</code> 来进行任意的有关 D3 库的操作。接着，通过将一个标题元素追加到 <code>body</code> 标签中，从而给图标添加了一个标题。如果你是在某一个确定的 <code>div</code> 标签之中创建图表的话，可在创建标题的元素之前选中该元素。另外，如果你知道标题将会保持不变，那么应该不使用 D3 而是在页面加载的时候就将其添加进来。</p>\n<pre><code class=\"language-js\">d3.select(\"body\").append(\"h3\").text(title);\n</code></pre>\n<p>在继续操作之前，先添加一些自定义 CSS。</p>\n<pre><code class=\"language-css\">body {\n\tbackground-color: #3c3c3c;\n\tcolor: #cfcfcf;\n}\n\ndiv {\n\tline-height: 15px;\n\tmargin-bottom: 3px;\n\tbackground-color: grey;\n}\n</code></pre>\n<p>此时，页面上出现了标题。你可以在样式表中为此标题定义自定义样式。接下来，在保持宽度一定的情况下，根据数据的大小设置水平柱状图的长度，创建水平柱状图。</p>\n<pre><code class=\"language-js\">d3.select(\"body\")\n\t.selectAll(\"div\")\n\t.data(data)\n\t.enter()\n\t.append(\"div\")\n\t.style(\"width\", function (d) {\n\t\treturn d.amount * 40 + \"px\";\n\t})\n\t.style(\"height\", \"15px\");\n</code></pre>\n<p>这样一来你的简单柱状图就设置完成了。你可以在 <a href=\"https://codepen.io/shaumik/pen/RwwNLQb\">CodePen</a> 上查看它。若是需要再向柱状条添加标签，可以遍历数据源从而给与之对应柱状条的 <code>div</code> 元素再添加一个文本元素。</p>\n<p>现在让我们尝试使用外部文件源。</p>\n<h2>从外部数据源加载数据</h2>\n<p>如果数据与网页大小（平均约 2 MB），相比足够大，那么如果您声明此数据为内联，可能会通过增加加载时间而带来不便。因此，将其保存在文件中是一个好习惯。CSV（逗号分隔值）文件中的数据结构如下所示。</p>\n<p>我们用于创建柱状图的外部数据已经<a href=\"https://raw.githubusercontent.com/sdaityari/my_git_project/master/posts.csv\">上传到 Github</a>，CSV（逗号分隔值）文件以逗号分隔保存的数据。文件的内容如下所示：</p>\n<pre><code>type,amount\nPost A,4\nPost B,2\nPost C,7\nPost D,5\nPost E,6\n</code></pre>\n<p>在 D3 中读取 CSV 文件，可以使用 <code>csv()</code> 方法。除此之外我们还使用了 <code>d3.autoType</code> 解析函数来将文件中的行数据转换成了 JavaScript 的对象。<a href=\"https://github.com/d3/d3-dsv/blob/master/README.md#autoType\">这个文档</a>列举了诸如将空值转换成 <code>null</code> 等之类的转换规则。你可以在加载完成之后的 <code>then()</code> 方法中用控制台打印的方式来观察转换之后的对象。</p>\n<pre><code class=\"language-js\">d3.csv(\n\t\"https://raw.githubusercontent.com/sdaityari/my_git_project/master/posts.csv\",\n\td3.autoType\n).then(function (data) {\n\tconsole.log(data);\n});\n</code></pre>\n<p>下面展示的是在 Chrome 开发者工具的控制台中显示的转换之后的 Javascript 对象。</p>\n<pre><code>(5) [{…}, {…}, {…}, {…}, {…}, columns: Array(2)]\n0: {type: \"Post A\", amount: 4}\n1: {type: \"Post B\", amount: 2}\n2: {type: \"Post C\", amount: 7}\n3:\n  amount: 5\n  type: \"Post D\"\n  __proto__: Object\n4: {type: \"Post E\", amount: 6}\ncolumns: Array(2)\n  0: \"type\"\n  1: \"amount\"\n  length: 2\n  __proto__: Array(0)\n  length: 5\n__proto__: Array(0)\n</code></pre>\n<p>存在类似的功能来加载其他类型的外部文件。要加载文本文件，请使用以下代码：</p>\n<pre><code class=\"language-js\">d3.text(\"/path/to/file.txt\").then(function (text) {\n\t// do something\n});\n</code></pre>\n<p>如果您的文件由其他分隔符分隔，则可以使用 <code>dsv()</code> 函数。唯一的区别是第一个参数，用于表明文件的分隔符。您也可以使用 <code>dsv()</code> 函数并使用逗号作为分隔符参数来加载 CSV 文件。</p>\n<pre><code class=\"language-js\">d3.dsv(\n\t\",\",\n\t\"https://raw.githubusercontent.com/sdaityari/my_git_project/master/posts.csv\",\n\td3.autoType\n).then(function (data) {\n\tconsole.log(data);\n});\n</code></pre>\n<p>另外，以下的几个方法也是可选择的：</p>\n<ul>\n<li><code>json()</code>: to load a file containing data in JSON format</li>\n<li><code>xml()</code>: to load a file containing XML data</li>\n<li><code>image()</code>: to load an image</li>\n<li><code>svg()</code>: to load vector graphics</li>\n</ul>\n<h2>使用外部数据源创建图表</h2>\n<p>现在您已经成功地从外部源加载了数据，让我们创建图表。</p>\n<pre><code class=\"language-js\">d3.csv(\n\t\"https://raw.githubusercontent.com/sdaityari/my_git_project/master/posts.csv\",\n\td3.autoType\n).then(function (data) {\n\td3.select(\"body\")\n\t\t.selectAll(\"div\")\n\t\t.data(data)\n\t\t.enter()\n\t\t.append(\"div\")\n\t\t.style(\"width\", function (d) {\n\t\t\treturn d.amount * 40 + \"px\";\n\t\t})\n\t\t.style(\"height\", \"15px\");\n});\n</code></pre>\n<p>与前一个函数的唯一区别在于，需要在 <code>csv()</code> 函数中进行 <code>data()</code> 调用。由于列名相同，因此其余代码保持不变。</p>\n<p>利用外部数据绘制的相同柱状图可以在 <a href=\"https://codepen.io/shaumik/pen/mGWRzm\">CodePen</a> 查看。</p>\n<h2>实时数据</h2>\n<p>D3 的一个优点是可以通过在触发事件后更改包含图表的元素来实时更新图表。 更新图表的流程如下：</p>\n<ul>\n<li>捕获到事件的触发，并调用函数；</li>\n<li>覆盖或更新现有数据；</li>\n<li>刷新包含图表的可视元素；</li>\n</ul>\n<p>这里是使用 Python 和 Websockets 描述的整个过程的<a href=\"https://medium.com/@benjaminmbrown/real-time-data-visualization-with-d3-crossfilter-and-websockets-in-python-tutorial-dba5255e7f0e\">示例</a>。</p>\n<h2>最后的思考</h2>\n<p>这样，我们就完成了使用 D3 从外部数据源创建图表的教程。我们首先使用 D3 创建了一个简单的柱状图，探索了从外部数据源读取数据的各种方法，最后，使用新加载的数据创建了一个图表。</p>\n<blockquote>\n<p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href=\"https://github.com/xitu/gold-miner\">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><a href=\"https://github.com/xitu/gold-miner\">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href=\"https://juejin.im\">掘金</a> 上的英文分享文章。内容覆盖 <a href=\"https://github.com/xitu/gold-miner#android\">Android</a>、<a href=\"https://github.com/xitu/gold-miner#ios\">iOS</a>、<a href=\"https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF\">前端</a>、<a href=\"https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF\">后端</a>、<a href=\"https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE\">区块链</a>、<a href=\"https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81\">产品</a>、<a href=\"https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1\">设计</a>、<a href=\"https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD\">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href=\"https://github.com/xitu/gold-miner\">掘金翻译计划</a>、<a href=\"http://weibo.com/juejinfanyi\">官方微博</a>、<a href=\"https://zhuanlan.zhihu.com/juejinfanyi\">知乎专栏</a>。</p>\n</blockquote>\n","coverImage":"/assets/blog/d3.png"}},"__N_SSG":true}